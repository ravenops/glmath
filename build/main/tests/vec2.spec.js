"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mat22_1 = require("../lib/mat22");
const mat23_1 = require("../lib/mat23");
const vec2_1 = require("../lib/vec2");
const vec3_1 = require("../lib/vec3");
const common_1 = require("../lib/common");
describe('vec2', () => {
    const vecA = vec2_1.Vec2.zero();
    const vecB = vec2_1.Vec2.zero();
    let result = vec2_1.Vec2.zero();
    beforeEach(() => {
        vecA.set([1, 2]);
        vecB.set([3, 4]);
    });
    describe('create', () => {
        beforeEach(() => {
            result.set([0, 0]);
        });
        it('should return a 2 element array initialized to 0s', () => {
            expect(result.equalsApproximately(new vec2_1.Vec2(0, 0)));
        });
    });
    describe('clone', () => {
        beforeEach(() => {
            result = vecA.clone();
        });
        it('should return a 2 element array initialized to the values in vecA', () => {
            expect(result.equalsApproximately(vecA));
        });
    });
    describe('copy', () => {
        beforeEach(() => {
            result.copy(vecA);
        });
        it('should place values into out', () => {
            expect(result.equalsApproximately(vecA));
        });
    });
    describe('set', () => {
        beforeEach(() => {
            result.set([1, 2]);
        });
        it('should place values into out', () => {
            expect(result.equalsApproximately(vecA));
        });
    });
    describe('add', () => {
        beforeEach(() => {
            result.copy(vecA).add(vecB);
        });
        it('should place values into out', () => {
            expect(result.equalsApproximately(new vec2_1.Vec2(4, 6)));
        });
        it('should not modify vecA', () => {
            expect(vecA.equalsApproximately(new vec2_1.Vec2(1, 2)));
        });
        it('should not modify vecB', () => {
            expect(vecB.equalsApproximately(new vec2_1.Vec2(3, 4)));
        });
    });
    describe('subtract', () => {
        beforeEach(() => {
            result.copy(vecA).subtract(vecB);
        });
        it('should place values into out', () => {
            expect(result.equalsApproximately(new vec2_1.Vec2(-2, -2)));
        });
        it('should not modify vecA', () => {
            expect(vecA.equalsApproximately(new vec2_1.Vec2(1, 2)));
        });
        it('should not modify vecB', () => {
            expect(vecB.equalsApproximately(new vec2_1.Vec2(3, 4)));
        });
    });
    describe('multiply', () => {
        beforeEach(() => {
            result.copy(vecA).multiply(vecB);
        });
        it('should place values into out', () => {
            expect(result.equalsApproximately(new vec2_1.Vec2(3, 8)));
        });
        it('should not modify vecA', () => {
            expect(vecA.equalsApproximately(new vec2_1.Vec2(1, 2)));
        });
        it('should not modify vecB', () => {
            expect(vecB.equalsApproximately(new vec2_1.Vec2(3, 4)));
        });
    });
    describe('divide', () => {
        beforeEach(() => {
            result.copy(vecA).divide(vecB);
        });
        it('should place values into out', () => {
            expect(result.equalsApproximately(new vec2_1.Vec2(0.3333333, 0.5)));
        });
        it('should not modify vecA', () => {
            expect(vecA.equalsApproximately(new vec2_1.Vec2(1, 2)));
        });
        it('should not modify vecB', () => {
            expect(vecB.equalsApproximately(new vec2_1.Vec2(3, 4)));
        });
    });
    describe('ceil', () => {
        beforeEach(() => {
            vecA.set([Math.E, Math.PI]);
            result.copy(vecA).ceil();
        });
        it('should place values into out', () => {
            expect(result.equalsApproximately(new vec2_1.Vec2(3, 4)));
        });
        it('should not modify vecA', () => {
            expect(vecA.equalsApproximately(new vec2_1.Vec2(1, 2)));
        });
    });
    describe('floor', () => {
        beforeEach(() => {
            vecA.set([Math.E, Math.PI]);
            result.copy(vecA).ceil();
        });
        it('should place values into out', () => {
            expect(result.equalsApproximately(new vec2_1.Vec2(2, 3)));
        });
        it('should not modify vecA', () => {
            expect(vecA.equalsApproximately(new vec2_1.Vec2(Math.E, Math.PI)));
        });
    });
    describe('min', () => {
        beforeEach(() => {
            vecA.set([1, 4]);
            vecB.set([3, 2]);
            result.copy(vecA).min(vecB);
        });
        it('should place values into out', () => {
            expect(result.equalsApproximately(new vec2_1.Vec2(1, 2)));
        });
        it('should not modify vecA', () => {
            expect(vecA.equalsApproximately(new vec2_1.Vec2(1, 4)));
        });
        it('should not modify vecB', () => {
            expect(vecB.equalsApproximately(new vec2_1.Vec2(3, 2)));
        });
    });
    describe('max', () => {
        beforeEach(() => {
            vecA.set([1, 4]);
            vecB.set([3, 2]);
            result.copy(vecA).max(vecB);
        });
        it('should place values into out', () => {
            expect(result.equalsApproximately(new vec2_1.Vec2(3, 4)));
        });
        it('should not modify vecA', () => {
            expect(vecA.equalsApproximately(new vec2_1.Vec2(1, 4)));
        });
        it('should not modify vecB', () => {
            expect(vecB.equalsApproximately(new vec2_1.Vec2(3, 2)));
        });
    });
    describe('round', () => {
        beforeEach(() => {
            vecA.set([Math.E, Math.PI]);
            result.copy(vecA).round();
        });
        it('should place values into out', () => {
            expect(result.equalsApproximately(new vec2_1.Vec2(3, 3)));
        });
        it('should not modify vecA', () => {
            expect(vecA.equalsApproximately(new vec2_1.Vec2(Math.E, Math.PI)));
        });
    });
    describe('scale', () => {
        beforeEach(() => {
            result.copy(vecA).scale(2);
        });
        it('should place values into out', () => {
            expect(result.equalsApproximately(new vec2_1.Vec2(2, 4)));
        });
        it('should not modify vecA', () => {
            expect(vecA.equalsApproximately(new vec2_1.Vec2(1, 2)));
        });
    });
    describe('distance', () => {
        let distance;
        beforeEach(() => {
            distance = result.copy(vecA).distance(vecB);
        });
        it('should return the distance', () => {
            expect(distance).toBeCloseTo(2.828427);
        });
    });
    describe('squaredDistance', () => {
        let distance;
        beforeEach(() => {
            distance = result.copy(vecA).squaredDistance(vecB);
        });
        it('should return the squared distance', () => {
            expect(distance).toEqual(8);
        });
    });
    describe('length', () => {
        let length;
        beforeEach(() => {
            result.copy(vecA).length;
        });
        it('should return the length', () => {
            expect(common_1.equalsApproximately(length, 2.236067));
        });
    });
    describe('squaredLength', () => {
        it('should return the squared length', () => {
            expect(vecA.sqLength).toEqual(5);
        });
    });
    describe('negate', () => {
        beforeEach(() => {
            result.copy(vecA).negate();
        });
        it('should place values into out', () => {
            expect(result.equalsApproximately(new vec2_1.Vec2(-1, -2)));
        });
        it('should not modify vecA', () => {
            expect(vecA.equalsApproximately(new vec2_1.Vec2(1, 2)));
        });
    });
    describe('normalize', () => {
        beforeEach(() => {
            vecA.set([5, 0]);
            result.copy(vecA).normalize();
        });
        it('should place values into out', () => {
            expect(result.equalsApproximately(new vec2_1.Vec2(1, 0)));
        });
        it('should not modify vecA', () => {
            expect(vecA.equalsApproximately(new vec2_1.Vec2(5, 0)));
        });
    });
    describe('dot', () => {
        let dot;
        beforeEach(() => {
            dot = result.copy(vecA).dot(vecB);
        });
        it('should return the dot product', () => {
            expect(dot).toEqual(11);
        });
        it('should not modify vecA', () => {
            expect(vecA.equalsApproximately(new vec2_1.Vec2(1, 2)));
        });
        it('should not modify vecB', () => {
            expect(vecB.equalsApproximately(new vec2_1.Vec2(3, 4)));
        });
    });
    describe('cross', () => {
        let out;
        beforeEach(() => {
            out = vecA.cross(vecB);
        });
        it('should place values into out', () => {
            expect(out.equalsApproximately(new vec3_1.Vec3(0, 0, -2)));
        });
        it('should not modify vecA', () => {
            expect(vecA.equalsApproximately(new vec2_1.Vec2(1, 2)));
        });
        it('should not modify vecB', () => {
            expect(vecB.equalsApproximately(new vec2_1.Vec2(3, 4)));
        });
    });
    describe('lerp', () => {
        describe('with a separate output vector', () => {
            beforeEach(() => {
                result.lerp(vecA, vecB, 0.5);
            });
            it('should place values into out', () => {
                expect(result.equalsApproximately(new vec2_1.Vec2(2, 3)));
            });
            it('should not modify vecA', () => {
                expect(vecA.equalsApproximately(new vec2_1.Vec2(1, 2)));
            });
            it('should not modify vecB', () => {
                expect(vecB.equalsApproximately(new vec2_1.Vec2(3, 4)));
            });
        });
    });
    describe('random', () => {
        describe('with no scale', () => {
            beforeEach(() => {
                result.random();
            });
            it('should result in a unit length vector', () => {
                expect(result.length).toBeCloseTo(1.0);
            });
        });
        describe('with a scale', () => {
            beforeEach(() => {
                result.random(5);
            });
            it('should result in a unit length vector', () => {
                expect(common_1.equalsApproximately(result.length, 5));
            });
        });
    });
    describe('transformMat2', () => {
        const matA = mat22_1.Mat2.identity();
        beforeEach(() => {
            matA.set([1, 2, 3, 4]);
        });
        beforeEach(() => {
            result.copy(vecA).transformMatrix2(matA);
        });
        it('should place values into out', () => {
            expect(result.equalsApproximately(new vec2_1.Vec2(7, 10)));
        });
        it('should not modify vecA', () => {
            expect(vecA.equalsApproximately(new vec2_1.Vec2(1, 2)));
        });
        it('should not modify matA', () => {
            expect(matA.equalsApproximately(new mat22_1.Mat2(1, 2, 3, 4)));
        });
    });
    describe('transformMat23', () => {
        const matA = mat23_1.Mat23.identity();
        beforeEach(() => {
            matA.set([1, 2, 3, 4, 5, 6]);
        });
        beforeEach(() => {
            result.copy(vecA).transformMatrix23(matA);
        });
        it('should place values into out', () => {
            expect(result.equalsApproximately(new vec2_1.Vec2(12, 16)));
        });
        it('should not modify vecA', () => {
            expect(vecA.equalsApproximately(new vec2_1.Vec2(1, 2)));
        });
        it('should not modify matA', () => {
            expect(matA.equalsApproximately(new mat23_1.Mat23(1, 2, 3, 4, 5, 6)));
        });
    });
    describe('rotate', () => {
        describe('rotation around world origin [0, 0, 0]', () => {
            beforeEach(() => {
                vecA.set([0, 1]);
                vecB.set([0, 0]);
                result.copy(vecA).rotate(vecB, Math.PI);
            });
            it('should return the rotated vector', () => {
                expect(result.equalsApproximately(new vec2_1.Vec2(0, -1)));
            });
        });
        describe('rotation around an arbitrary origin', () => {
            beforeEach(() => {
                vecA.set([6, -5]);
                vecB.set([0, -5]);
                result.copy(vecA).rotate(vecB, Math.PI);
            });
            it('should return the rotated vector', () => {
                expect(result.equalsApproximately(new vec2_1.Vec2(-6, -5)));
            });
        });
    });
    describe('angle', () => {
        let angle;
        beforeEach(() => {
            vecA.set([1, 0]);
            vecB.set([1, 2]);
            angle = vecA.angle(vecB);
        });
        it('should return the angle', () => {
            expect(common_1.equalsApproximately(angle, 1.10714));
        });
        it('should not modify vecA', () => {
            expect(vecA.equalsApproximately(new vec2_1.Vec2(0, 1)));
        });
        it('should not modify vecB', () => {
            expect(vecB.equalsApproximately(new vec2_1.Vec2(1, 2)));
        });
    });
    describe('str', () => {
        beforeEach(() => {
            result.copy(vecA);
        });
        it('should return a string representation of the vector', () => {
            expect(result.toString()).toEqual('vec2(1, 2)');
        });
    });
    describe('exactEquals', () => {
        const vecC = vec2_1.Vec2.zero();
        let r0, r1;
        beforeEach(() => {
            vecA.set([0, 1]);
            vecB.set([0, 1]);
            vecC.set([1, 2]);
            r0 = vecA.equalsExact(vecB);
            r1 = vecA.equalsExact(vecC);
        });
        it('should return true for identical vectors', () => {
            expect(r0).toBe(true);
        });
        it('should return false for different vectors', () => {
            expect(r1).toBe(false);
        });
        it('should not modify vecA', () => {
            expect(vecA.equalsApproximately(new vec2_1.Vec2(0, 1)));
        });
        it('should not modify vecB', () => {
            expect(vecB.equalsApproximately(new vec2_1.Vec2(0, 1)));
        });
    });
    describe('equals', () => {
        const vecC = vec2_1.Vec2.zero();
        const vecD = vec2_1.Vec2.zero();
        let r0, r1, r2;
        beforeEach(() => {
            vecA.set([0, 1]);
            vecB.set([0, 1]);
            vecC.set([1, 2]);
            vecD.set([1e-16, 1]);
            r0 = vecA.equalsApproximately(vecB);
            r1 = vecA.equalsApproximately(vecC);
            r2 = vecA.equalsApproximately(vecD);
        });
        it('should return true for identical vectors', () => {
            expect(r0).toBe(true);
        });
        it('should return false for different vectors', () => {
            expect(r1).toBe(false);
        });
        it('should return true for close but not identical vectors', () => {
            expect(r2).toBe(true);
        });
        it('should not modify vecA', () => {
            expect(vecA.equalsApproximately(new vec2_1.Vec2(0, 1)));
        });
        it('should not modify vecB', () => {
            expect(vecB.equalsApproximately(new vec2_1.Vec2(0, 1)));
        });
    });
    describe('zero', () => {
        beforeEach(() => {
            result.set([1, 2]);
            result.zero();
        });
        it('should result in a 2 element vector with zeros', () => {
            expect(result.equalsApproximately(vec2_1.Vec2.zero()));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,
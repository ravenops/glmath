import { Quat } from './quat';
import { Vec3 } from './vec3';
import { Mat4 } from './mat44';
export declare class DualQuat extends Float32Array {
    constructor(realX: number, realY: number, realZ: number, realW: number, dualX: number, dualY: number, dualZ: number, dualW: number);
    identity(): DualQuat;
    static identity(): DualQuat;
    clone(): DualQuat;
    setFromRotationTranslationValues(x1: number, y1: number, z1: number, w1: number, x2: number, y2: number, z2: number): DualQuat;
    setFromTranslationRotation(q: Quat, t: Vec3): DualQuat;
    setFromTranslation(t: Vec3): DualQuat;
    setFromRotation(q: Quat): DualQuat;
    setFromMat4(a: Mat4): DualQuat;
    copy(dq: DualQuat): DualQuat;
    setIdentity(): DualQuat;
    get real(): Quat;
    set real(q: Quat);
    get dual(): Quat;
    set dual(q: Quat);
    get translation(): Vec3;
    translate(v: Vec3): DualQuat;
    rotateX(rad: number): DualQuat;
    rotateY(rad: number): DualQuat;
    rotateZ(rad: number): DualQuat;
    rotateByQuatAppend(q: Quat): DualQuat;
    rotateByQuatPrepend(q: Quat): DualQuat;
    rotateAroundAxis(axis: Vec3, rad: number): DualQuat;
    add(b: DualQuat): DualQuat;
    multiply(b: DualQuat): DualQuat;
    scale(b: number): DualQuat;
    dot(b: DualQuat): number;
    lerp(a: DualQuat, b: DualQuat, t: number): DualQuat;
    invert(): DualQuat;
    conjugate(): DualQuat;
    get length(): number;
    get squaredLength(): number;
    normalize(): DualQuat;
    toString(): string;
    equalsExact(b: DualQuat): boolean;
    equalsApproximately(b: DualQuat): boolean;
}

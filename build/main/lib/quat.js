"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("./common");
const mat33_1 = require("./mat33");
const vec3_1 = require("./vec3");
class Quat extends Float32Array {
    constructor(x, y, z, w) {
        super(4);
        this[0] = x;
        this[1] = y;
        this[2] = z;
        this[3] = w;
    }
    identity() {
        this[0] = 0;
        this[1] = 0;
        this[2] = 0;
        this[3] = 1;
    }
    static identity() {
        return new Quat(0, 0, 0, 1);
    }
    static zero() {
        return new Quat(0, 0, 0, 0);
    }
    setFromAxisAngle(axis, rad) {
        rad *= 0.5;
        const s = Math.sin(rad);
        this[0] = s * axis[0];
        this[1] = s * axis[1];
        this[2] = s * axis[2];
        this[3] = Math.cos(rad);
        return this;
    }
    /**
     * Gets the rotation axis and angle for a given
     *  quaternion. If a quaternion is created with
     *  setAxisAngle, this method will return the same
     *  values as providied in the original parameter list
     *  OR functionally equivalent values.
     * Example: The quaternion formed by axis [0, 0, 1] and
     *  angle -90 is the same as the quaternion formed by
     *  [0, 0, 1] and 270. This method favors the latter.
     */
    get axisAngle() {
        const rad = Math.acos(this[3]) * 2.0;
        const s = Math.sin(rad / 2.0);
        let axis;
        if (s > common_1.EPSILON) {
            axis = new vec3_1.Vec3(this[0] / s, this[1] / s, this[2] / s);
        }
        else {
            // If s is zero, return any axis (no rotation - axis does not matter)
            axis = new vec3_1.Vec3(1, 0, 0);
        }
        return { rad, axis };
    }
    // Angular distance between two unit quaternions
    angleDistance(b) {
        const dotproduct = this.dot(b);
        return Math.acos(2 * dotproduct * dotproduct - 1);
    }
    multiply(b) {
        const [ax, ay, az, aw] = this;
        const [bx, by, bz, bw] = b;
        this[0] = ax * bw + aw * bx + ay * bz - az * by;
        this[1] = ay * bw + aw * by + az * bx - ax * bz;
        this[2] = az * bw + aw * bz + ax * by - ay * bx;
        this[3] = aw * bw - ax * bx - ay * by - az * bz;
        return this;
    }
    rotateX(rad) {
        rad *= 0.5;
        const [ax, ay, az, aw] = this;
        const bx = Math.sin(rad);
        const bw = Math.cos(rad);
        this[0] = ax * bw + aw * bx;
        this[1] = ay * bw + az * bx;
        this[2] = az * bw - ay * bx;
        this[3] = aw * bw - ax * bx;
        return this;
    }
    rotateY(rad) {
        rad *= 0.5;
        const [ax, ay, az, aw] = this;
        const by = Math.sin(rad);
        const bw = Math.cos(rad);
        this[0] = ax * bw - az * by;
        this[1] = ay * bw + aw * by;
        this[2] = az * bw + ax * by;
        this[3] = aw * bw - ay * by;
        return this;
    }
    rotateZ(rad) {
        rad *= 0.5;
        const [x, y, z, w] = this;
        const rz = Math.sin(rad);
        const rw = Math.cos(rad);
        this[0] = x * rw + y * rz;
        this[1] = y * rw - x * rz;
        this[2] = z * rw + w * rz;
        this[3] = w * rw - z * rz;
        return this;
    }
    /**
     * Calculates the W component of a quat from the X, Y, and Z components.
     * Assumes that quaternion is 1 unit in length.
     * Any existing W component will be ignored.
     */
    calculateW() {
        const [x, y, z] = this;
        this[3] = common_1.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
        return this;
    }
    // Calculate the exponential of a unit quaternion.
    exp() {
        const [x, y, z, w] = this;
        const r = common_1.sqrt(x * x + y * y + z * z);
        const et = Math.exp(w);
        const s = r > 0 ? (et * Math.sin(r)) / r : 0;
        this[0] = x * s;
        this[1] = y * s;
        this[2] = z * s;
        this[3] = et * Math.cos(r);
        return this;
    }
    // Calculate the natural logarithm of a unit quaternion.
    ln() {
        const [x, y, z, w] = this;
        const r = common_1.sqrt(x * x + y * y + z * z);
        const t = r > 0 ? Math.atan2(r, w) / r : 0;
        this[0] = x * t;
        this[1] = y * t;
        this[2] = z * t;
        this[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);
        return this;
    }
    // Calculate the scalar power of a unit quaternion.
    pow(b) {
        return this.ln()
            .scale(b)
            .exp();
    }
    slerp(a, b, t) {
        const [ax, ay, az, aw] = a;
        let [bx, by, bz, bw] = b;
        // calc cosine
        let cosom = ax * bx + ay * by + az * bz + aw * bw;
        // adjust signs (if necessary)
        if (cosom < 0.0) {
            cosom = -cosom;
            bx = -bx;
            by = -by;
            bz = -bz;
            bw = -bw;
        }
        let omega, sinom, scale0, scale1;
        // calculate coefficients
        if (1.0 - cosom > common_1.EPSILON) {
            // standard case (slerp)
            omega = Math.acos(cosom);
            sinom = Math.sin(omega);
            scale0 = Math.sin((1.0 - t) * omega) / sinom;
            scale1 = Math.sin(t * omega) / sinom;
        }
        else {
            // "from" and "to" quaternions are very close
            //  ... so we can do a linear interpolation
            scale0 = 1.0 - t;
            scale1 = t;
        }
        // calculate final values
        this[0] = scale0 * ax + scale1 * bx;
        this[1] = scale0 * ay + scale1 * by;
        this[2] = scale0 * az + scale1 * bz;
        this[3] = scale0 * aw + scale1 * bw;
        return this;
    }
    random() {
        // Implementation of http://planning.cs.uiuc.edu/node198.html
        // TODO: Calling random 3 times is probably not the fastest solution
        const u1 = Math.random();
        const u2 = Math.random();
        const u3 = Math.random();
        const sqrt1MinusU1 = common_1.sqrt(1 - u1);
        const sqrtU1 = common_1.sqrt(u1);
        this[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);
        this[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);
        this[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);
        this[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);
        return this;
    }
    invert() {
        const [x, y, z, w] = this;
        const dot = x * x + y * y + z * z + w * w;
        const invDot = dot ? 1.0 / dot : 0;
        this[0] = -x * invDot;
        this[1] = -y * invDot;
        this[2] = -z * invDot;
        this[3] = z * invDot;
        return this;
    }
    // Calculates the conjugate of a quat if the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
    conjugate() {
        const [x, y, z, w] = this;
        this[0] = -x;
        this[1] = -y;
        this[2] = -z;
        this[3] = w;
        return this;
    }
    /**
     * Creates a quaternion from the given 3x3 rotation matrix.
     *
     * NOTE: The resultant quaternion is not normalized, so you should be sure
     * to renormalize the quaternion yourself where necessary.
     *
     */
    setFromMat3(m) {
        // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
        // article "Quaternion Calculus and Fast Animation".
        const fTrace = m[0] + m[4] + m[8];
        let fRoot = 0;
        if (fTrace > 0.0) {
            // |w| > 1/2, may as well choose w > 1/2
            fRoot = common_1.sqrt(fTrace + 1.0); // 2w
            this[3] = 0.5 * fRoot;
            fRoot = 0.5 / fRoot; // 1/(4w)
            this[0] = (m[5] - m[7]) * fRoot;
            this[1] = (m[6] - m[2]) * fRoot;
            this[2] = (m[1] - m[3]) * fRoot;
        }
        else {
            // |w| <= 1/2
            let i = 0;
            if (m[4] > m[0])
                i = 1;
            if (m[8] > m[i * 3 + i])
                i = 2;
            const j = (i + 1) % 3;
            const k = (i + 2) % 3;
            fRoot = common_1.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
            this[i] = 0.5 * fRoot;
            fRoot = 0.5 / fRoot;
            this[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
            this[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
            this[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
        }
        return this;
    }
    // Creates a quaternion from the given euler angle x, y, z.in degrees
    setFromEulerDegrees(x, y, z) {
        const halfToRad = 0.5 * common_1.degree2rad;
        x *= halfToRad;
        y *= halfToRad;
        z *= halfToRad;
        const sx = Math.sin(x);
        const cx = Math.cos(x);
        const sy = Math.sin(y);
        const cy = Math.cos(y);
        const sz = Math.sin(z);
        const cz = Math.cos(z);
        this[0] = sx * cy * cz - cx * sy * sz;
        this[1] = cx * sy * cz + sx * cy * sz;
        this[2] = cx * cy * sz - sx * sy * cz;
        this[3] = cx * cy * cz + sx * sy * sz;
        return this;
    }
    toString() {
        const [x, y, z, w] = this;
        return `quat(${x}, ${y}, ${z}, ${w})`;
    }
    clone() {
        return new Quat(this[0], this[1], this[2], this[3]);
    }
    copy(q) {
        this.set([q[0], q[1], q[2], q[3]]);
        return this;
    }
    add(q) {
        this[0] += q[0];
        this[1] += q[1];
        this[2] += q[2];
        this[3] += q[3];
        return this;
    }
    scale(n) {
        this[0] *= n;
        this[1] *= n;
        this[2] *= n;
        this[3] *= n;
        return this;
    }
    dot(b) {
        const [a0, a1, a2, a3] = this;
        const [b0, b1, b2, b3] = b;
        return a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;
    }
    lerp(a, b, t) {
        const [ax, ay, az, aw] = a;
        const [bx, by, bz, bw] = b;
        this[0] = ax + t * (bx - ax);
        this[1] = ay + t * (by - ay);
        this[2] = az + t * (bz - az);
        this[3] = aw + t * (bw - aw);
        return this;
    }
    get length() {
        const [x, y, z, w] = this;
        return Math.hypot(x, y, z, w);
    }
    get squaredLength() {
        const [x, y, z, w] = this;
        return x * x + y * y + z * z + w * w;
    }
    normalize() {
        const [x, y, z, w] = this;
        const len = common_1.inverseSqrt(this.squaredLength);
        this[0] = x * len;
        this[1] = y * len;
        this[2] = z * len;
        this[3] = w * len;
        return this;
    }
    equalsExact(b) {
        const [x, y, z, w] = this;
        const [bx, by, bz, bw] = b;
        return x === bx && y === by && z === bz && w === bw;
    }
    equalsApproximately(b) {
        const [x, y, z, w] = this;
        const [bx, by, bz, bw] = b;
        return (common_1.equalsApproximately(x, bx) &&
            common_1.equalsApproximately(y, by) &&
            common_1.equalsApproximately(z, bz) &&
            common_1.equalsApproximately(w, bw));
    }
    // represent the shortest rotation from one vector to another.
    // Both vectors are assumed to be unit length.
    rotationTo(a, b) {
        const dot = a.dot(b);
        if (dot < -0.999999) {
            const tmpvec3 = vec3_1.Vec3.right().cross(a);
            if (tmpvec3.length < common_1.EPSILON) {
                const axis = vec3_1.Vec3.up()
                    .cross(a)
                    .normalize();
                this.setFromAxisAngle(axis, Math.PI);
                return this;
            }
        }
        else if (dot > 0.999999) {
            this.set([0, 0, 0, 1]);
            return this;
        }
        const tmp = a.clone().cross(b);
        this[0] = tmp[0];
        this[1] = tmp[1];
        this[2] = tmp[2];
        this[3] = 1 + dot;
        return this.normalize();
    }
    // Performs a spherical linear interpolation with two control points
    sqlerp(a, b, c, d, t) {
        const temp1 = Quat.identity().slerp(a, d, t);
        const temp2 = Quat.identity().slerp(b, c, t);
        this.slerp(temp1, temp2, 2 * t * (1 - t));
        return this;
    }
    /**
     * Sets the specified quaternion with values corresponding to the given
     * axes. Each axis is a vec3 and is expected to be unit length and
     * perpendicular to all other specified axes.
     *
     * @param {vec3} view  the vector representing the viewing direction
     * @param {vec3} right the vector representing the local "right" direction
     * @param {vec3} up    the vector representing the local "up" direction
     */
    setFromAxes(view, right, up) {
        const m = new mat33_1.Mat3(right[0], up[0], -view[0], right[1], up[1], -view[1], right[2], up[2], -view[2]);
        return this.setFromMat3(m).normalize();
    }
}
exports.Quat = Quat;
//# sourceMappingURL=data:application/json;base64,
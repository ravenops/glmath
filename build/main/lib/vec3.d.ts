import { Vec2 } from './vec2';
import { Mat4 } from './mat44';
import { Mat3 } from './mat33';
import { Quat } from './quat';
export declare class Vec3 extends Float32Array {
    constructor(x: number, y: number, z: number);
    setfromV2(v: Vec2): Vec3;
    static zero(): Vec3;
    static one(): Vec3;
    static right(): Vec3;
    static up(): Vec3;
    clone(): Vec3;
    get length(): number;
    copy(a: Vec3): Vec3;
    add(b: Vec3): Vec3;
    subtract(b: Vec3): Vec3;
    multiply(b: Vec3): Vec3;
    divide(b: Vec3): Vec3;
    ceil(): Vec3;
    floor(): Vec3;
    min(b: Vec3): Vec3;
    max(b: Vec3): Vec3;
    round(): Vec3;
    scale(b: number): Vec3;
    distance(b: Vec3): number;
    squaredDistance(b: Vec3): number;
    get squaredLength(): number;
    negate(): Vec3;
    inverse(): Vec3;
    normalize(): Vec3;
    dot(b: Vec3): number;
    cross(b: Vec3): Vec3;
    lerp(a: Vec3, b: Vec3, t: number): Vec3;
    hermite(a: Vec3, b: Vec3, c: Vec3, d: Vec3, t: number): Vec3;
    bezier(a: Vec3, b: Vec3, c: Vec3, d: Vec3, t: number): Vec3;
    random(scale?: number): Vec3;
    transformMat4(m: Mat4): Vec3;
    transformMat3(m: Mat3): Vec3;
    transformQuat(q: Quat): Vec3;
    rotateX(origin: Vec3, rad: number): Vec3;
    rotateY(origin: Vec3, rad: number): Vec3;
    rotateZ(origin: Vec3, rad: number): Vec3;
    angle(b: Vec3): number;
    zero(): Vec3;
    toString(): string;
    equalsExact(b: Vec3): boolean;
    equalsApproximately(b: Vec3): boolean;
}
